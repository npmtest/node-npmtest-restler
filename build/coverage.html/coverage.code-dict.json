{"/home/travis/build/npmtest/node-npmtest-restler/test.js":"/* istanbul instrument in package npmtest_restler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restler/lib.npmtest_restler.js":"/* istanbul instrument in package npmtest_restler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_restler = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_restler = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-restler/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-restler && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_restler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_restler\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_restler.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_restler.rollup.js'] =\n            local.assetsDict['/assets.npmtest_restler.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_restler.__dirname +\n                    '/lib.npmtest_restler.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restler/restler/lib/restler.js":"var util      = require('util'),\n    events    = require(\"events\"),\n    http      = require('http'),\n    https     = require('https'),\n    url       = require('url'),\n    qs        = require('qs'),\n    multipart = require('./multipartform'),\n    zlib      = require('zlib'),\n    iconv     = require('iconv-lite');\n\nfunction mixin(target, source) {\n  source = source || {};\n  Object.keys(source).forEach(function(key) {\n    target[key] = source[key];\n  });\n\n  return target;\n}\n\nfunction Request(uri, options) {\n  events.EventEmitter.call(this);\n  this.url = url.parse(uri);\n  this.options = options;\n  this.headers = {\n    'Accept': '*/*',\n    'User-Agent': 'Restler for node.js',\n    'Host': this.url.host\n  };\n\n  this.headers['Accept-Encoding'] = 'gzip, deflate';\n\n  mixin(this.headers, options.headers || {});\n\n  // set port and method defaults\n  if (!this.url.port) this.url.port = (this.url.protocol == 'https:') ? '443' : '80';\n  if (!this.options.method) this.options.method = (this.options.data) ? 'POST' : 'GET';\n  if (typeof this.options.followRedirects == 'undefined') this.options.followRedirects = true;\n\n  // stringify query given in options of not given in URL\n  if (this.options.query && !this.url.query) {\n    if (typeof this.options.query == 'object')\n      this.url.query = qs.stringify(this.options.query);\n    else this.url.query = this.options.query;\n  }\n\n  this._applyAuth();\n\n  if (this.options.multipart) {\n    this.headers['Content-Type'] = 'multipart/form-data; boundary=' + multipart.defaultBoundary;\n    var multipart_size = multipart.sizeOf(this.options.data, multipart.defaultBoundary);\n    if (typeof multipart_size === 'number' && multipart_size === multipart_size) {\n        this.headers['Content-Length'] = multipart_size;\n    }\n    else {\n        console.log(\"Building multipart request without Content-Length header, please specify all file sizes\");\n    }\n  } else {\n    if (typeof this.options.data == 'object' && !Buffer.isBuffer(this.options.data)) {\n      this.options.data = qs.stringify(this.options.data);\n      this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      this.headers['Content-Length'] = this.options.data.length;\n    }\n    if (typeof this.options.data == 'string') {\n      var buffer = new Buffer(this.options.data, this.options.encoding || 'utf8');\n      this.options.data = buffer;\n      this.headers['Content-Length'] = buffer.length;\n    }\n    if (!this.options.data) {\n      this.headers['Content-Length'] = 0;\n    }\n  }\n\n  var proto = (this.url.protocol == 'https:') ? https : http;\n\n  this.request = proto.request({\n    host: this.url.hostname,\n    port: this.url.port,\n    path: this._fullPath(),\n    method: this.options.method,\n    headers: this.headers,\n    rejectUnauthorized: this.options.rejectUnauthorized,\n    agent: this.options.agent\n  });\n\n  this._makeRequest();\n}\n\nutil.inherits(Request, events.EventEmitter);\n\nmixin(Request.prototype, {\n  _isRedirect: function(response) {\n    return ([301, 302, 303, 307].indexOf(response.statusCode) >= 0);\n  },\n  _fullPath: function() {\n    var path = this.url.pathname || '/';\n    if (this.url.hash) path += this.url.hash;\n    if (this.url.query) path += '?' + this.url.query;\n    return path;\n  },\n  _applyAuth: function() {\n    var authParts;\n\n    if (this.url.auth) {\n      authParts = this.url.auth.split(':');\n      this.options.username = authParts[0];\n      this.options.password = authParts[1];\n    }\n\n    if (this.options.username && this.options.password !== undefined) {\n      var b = new Buffer([this.options.username, this.options.password].join(':'));\n      this.headers['Authorization'] = \"Basic \" + b.toString('base64');\n    } else if (this.options.accessToken) {\n      this.headers['Authorization'] = \"Bearer \" + this.options.accessToken;\n    }\n  },\n  _responseHandler: function(response) {\n    var self = this;\n\n    if (self._isRedirect(response) && self.options.followRedirects) {\n      try {\n        // 303 should redirect and retrieve content with the GET method\n        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n        if (response.statusCode === 303) {\n            self.url    = url.parse(url.resolve(self.url.href, response.headers['location']));\n            self.options.method = 'GET';\n            delete self.options.data;\n            self._retry();\n        } else {\n            self.url = url.parse(url.resolve(self.url.href, response.headers['location']));\n            self._retry();\n            // todo handle somehow infinite redirects\n        }\n      } catch(err) {\n        err.message = 'Failed to follow redirect: ' + err.message;\n        self._fireError(err, response);\n      }\n    } else {\n      var body = '';\n\n      // When using browserify, response.setEncoding is not defined\n      if (typeof response.setEncoding == 'function')\n        response.setEncoding('binary');\n\n      response.on('data', function(chunk) {\n        body += chunk;\n      });\n\n      response.on('end', function() {\n        response.rawEncoded = body;\n        self._decode(new Buffer(body, 'binary'), response, function(err, body) {\n          if (err) {\n            self._fireError(err, response);\n            return;\n          }\n          response.raw = body;\n          body = self._iconv(body, response);\n          self._encode(body, response, function(err, body) {\n            if (err) {\n              self._fireError(err, response);\n            } else {\n              self._fireSuccess(body, response);\n            }\n          });\n        });\n      });\n    }\n  },\n  _decode: function(body, response, callback) {\n    var decoder = response.headers['content-encoding'];\n    if (decoder in decoders) {\n      decoders[decoder].call(response, body, callback);\n    } else {\n      callback(null, body);\n    }\n  },\n  _iconv: function(body, response) {\n    var charset = response.headers['content-type'];\n    if (charset) {\n      charset = /\\bcharset=(.+)(?:;|$)/i.exec(charset);\n      if (charset) {\n        charset = charset[1].trim().toUpperCase();\n        if (charset != 'UTF-8') {\n          try {\n            return iconv.decode(body, charset);\n          } catch (err) {}\n        }\n      }\n    }\n    return body;\n  },\n  _encode: function(body, response, callback) {\n    var self = this;\n    if (self.options.decoding == 'buffer') {\n      callback(null, body);\n    } else {\n      body = body.toString(self.options.decoding);\n      if (self.options.parser) {\n        self.options.parser.call(response, body, callback);\n      } else {\n        callback(null, body);\n      }\n    }\n  },\n  _fireError: function(err, response) {\n    this._fireCancelTimeout();\n    this.emit('error', err, response);\n    this.emit('complete', err, response);\n  },\n  _fireCancelTimeout: function(){\n    var self = this;\n    if(self.options.timeout){\n      clearTimeout(self.options.timeoutFn);\n    }\n  },\n  _fireTimeout: function(err){\n    this.emit('timeout', err);\n    this.aborted = true;\n    this.timedout = true;\n    this.request.abort();\n  },\n  _fireSuccess: function(body, response) {\n    if (parseInt(response.statusCode) >= 400) {\n      this.emit('fail', body, response);\n    } else {\n      this.emit('success', body, response);\n    }\n    this.emit(response.statusCode.toString().replace(/\\d{2}$/, 'XX'), body, response);\n    this.emit(response.statusCode.toString(), body, response);\n    this.emit('complete', body, response);\n  },\n  _makeRequest: function() {\n    var self = this;\n    var timeoutMs = self.options.timeout;\n    if(timeoutMs){\n      self.options.timeoutFn = setTimeout(function(){\n        self._fireTimeout(timeoutMs);\n      },timeoutMs);\n    }\n    this.request.on('response', function(response) {\n      self._fireCancelTimeout();\n      self.emit('response', response);\n      self._responseHandler(response);\n    }).on('error', function(err) {\n      self._fireCancelTimeout();\n      if (!self.aborted) {\n        self._fireError(err, null);\n      }\n    });\n  },\n  _retry: function() {\n    this.request.removeAllListeners().on('error', function() {});\n    if (this.request.finished) {\n      this.request.abort();\n    }\n    Request.call(this, this.url.href, this.options); // reusing request object to handle recursive calls and remember listeners\n    this.run();\n  },\n  run: function() {\n    var self = this;\n    if (this.options.multipart) {\n      multipart.write(this.request, this.options.data, function() {\n        self.request.end();\n      });\n    } else {\n      if (this.options.data) {\n        this.request.write(this.options.data, this.options.encoding || 'utf8');\n      }\n      this.request.end();\n    }\n\n    return this;\n  },\n  abort: function(err) {\n    var self = this;\n\n    if (err) {\n      if (typeof err == 'string') {\n        err = new Error(err);\n      } else if (!(err instanceof Error)) {\n        err = new Error('AbortError');\n      }\n      err.type = 'abort';\n    } else {\n      err = null;\n    }\n\n    self.request.on('close', function() {\n      if (err) {\n        self._fireError(err, null);\n      } else {\n        self.emit('complete', null, null);\n      }\n    });\n\n    self.aborted = true;\n    self.request.abort();\n    self.emit('abort', err);\n    return this;\n  },\n  retry: function(timeout) {\n    var self = this;\n    timeout = parseInt(timeout);\n    var fn = self._retry.bind(self);\n    if (!isFinite(timeout) || timeout <= 0) {\n      process.nextTick(fn, timeout);\n    } else {\n      setTimeout(fn, timeout);\n    }\n    return this;\n  }\n});\n\nfunction shortcutOptions(options, method) {\n  options = options || {};\n  options.method = method;\n  options.parser = (typeof options.parser !== \"undefined\") ? options.parser : parsers.auto;\n  parsers.xml.options = (typeof options.xml2js == 'undefined') ? {} : options.xml2js;\n  return options;\n}\n\nfunction request(url, options) {\n  var request = new Request(url, options);\n  request.on('error', function() {});\n  process.nextTick(request.run.bind(request));\n  return request;\n}\n\nfunction get(url, options) {\n return request(url, shortcutOptions(options, 'GET'));\n}\n\nfunction patch(url, options) {\n  return request(url, shortcutOptions(options, 'PATCH'));\n}\n\nfunction post(url, options) {\n  return request(url, shortcutOptions(options, 'POST'));\n}\n\nfunction put(url, options) {\n  return request(url, shortcutOptions(options, 'PUT'));\n}\n\nfunction del(url, options) {\n  return request(url, shortcutOptions(options, 'DELETE'));\n}\n\nfunction head(url, options) {\n  return request(url, shortcutOptions(options, 'HEAD'));\n}\n\nfunction json(url, data, options, method) {\n  options = options || {};\n  options.parser = (typeof options.parser !== \"undefined\") ? options.parser : parsers.auto;\n  options.headers = options.headers || {};\n  options.headers['content-type'] = 'application/json';\n  options.data = JSON.stringify(data || {});\n  options.method = method || 'GET';\n  return request(url, options);\n}\n\nfunction postJson(url, data, options) {\n  return json(url, data, options, 'POST');\n}\n\nfunction putJson(url, data, options) {\n  return json(url, data, options, 'PUT');\n}\n\nfunction patchJson(url, data, options) {\n  return json(url, data, options, 'PATCH');\n}\n\nvar parsers = {\n  auto: function(data, callback) {\n    var contentType = this.headers['content-type'];\n    var contentParser;\n    if (contentType) {\n      contentType = contentType.replace(/;.+/, ''); // remove all except mime type (eg. text/html; charset=UTF-8)\n      if (contentType in parsers.auto.matchers) {\n        contentParser = parsers.auto.matchers[contentType];\n      } else {\n        // custom (vendor) mime types\n        var parts = contentType.match(/^([\\w-]+)\\/vnd((?:\\.(?:[\\w-]+))+)\\+([\\w-]+)$/i);\n        if (parts) {\n          var type = parts[1];\n          var vendors = parts[2].substr(1).split('.');\n          var subtype = parts[3];\n          var vendorType;\n          while (vendors.pop() && !(vendorType in parsers.auto.matchers)) {\n            vendorType = vendors.length\n              ? type + '/vnd.' + vendors.join('.') + '+' + subtype\n              : vendorType = type + '/' + subtype;\n          }\n          contentParser = parsers.auto.matchers[vendorType];\n        }\n      }\n    }\n    if (typeof contentParser == 'function') {\n      contentParser.call(this, data, callback);\n    } else {\n      callback(null, data);\n    }\n  },\n  json: function(data, callback) {\n    if (data && data.length) {\n      var parsedData;\n      try {\n        parsedData = JSON.parse(data);\n      } catch (err) {\n        err.message = 'Failed to parse JSON body: ' + err.message;\n        callback(err, null);\n      }\n      if (parsedData !== undefined) {\n        callback(null, parsedData);\n      }\n    } else {\n      callback(null, null);\n    }\n  }\n};\n\nparsers.auto.matchers = {\n  'application/json': parsers.json\n};\n\ntry {\n  var yaml = require('yaml');\n\n  parsers.yaml = function(data, callback) {\n    if (data) {\n      try {\n        callback(null, yaml.eval(data));\n      } catch (err) {\n        err.message = 'Failed to parse YAML body: ' + err.message;\n        callback(err, null);\n      }\n    } else {\n      callback(null, null);\n    }\n  };\n\n  parsers.auto.matchers['application/yaml'] = parsers.yaml;\n} catch(e) {}\n\ntry {\n  var xml2js = require('xml2js');\n\n  parsers.xml = function(data, callback) {\n    if (data) {\n      var parser = new xml2js.Parser(parsers.xml.options);\n      parser.parseString(data, function(err, data) {\n        if (err) {\n          err.message = 'Failed to parse XML body: ' + err.message;\n        }\n        callback(err, data);\n      });\n    } else {\n      callback(null, null);\n    }\n  };\n\n  parsers.auto.matchers['application/xml'] = parsers.xml;\n} catch(e) { }\n\nvar decoders = {\n  gzip: function(buf, callback) {\n    zlib.gunzip(buf, callback);\n  },\n  deflate: function(buf, callback) {\n    zlib.inflate(buf, callback);\n  }\n};\n\n\nfunction Service(defaults) {\n  if (defaults.baseURL) {\n   this.baseURL = defaults.baseURL;\n   delete defaults.baseURL;\n  }\n\n  this.defaults = defaults;\n}\n\nmixin(Service.prototype, {\n  request: function(path, options) {\n    return request(this._url(path), this._withDefaults(options));\n  },\n  get: function(path, options) {\n    return get(this._url(path), this._withDefaults(options));\n  },\n  patch: function(path, options) {\n    return patch(this._url(path), this._withDefaults(options));\n  },\n  put: function(path, options) {\n    return put(this._url(path), this._withDefaults(options));\n  },\n  post: function(path, options) {\n    return post(this._url(path), this._withDefaults(options));\n  },\n  json: function(method, path, data, options) {\n    return json(this._url(path), data, this._withDefaults(options), method);\n  },\n  del: function(path, options) {\n    return del(this._url(path), this._withDefaults(options));\n  },\n  _url: function(path) {\n    if (this.baseURL) return url.resolve(this.baseURL, path);\n    else return path;\n  },\n  _withDefaults: function(options) {\n    var o = mixin({}, this.defaults);\n    return mixin(o, options);\n  }\n});\n\nfunction service(constructor, defaults, methods) {\n  constructor.prototype = new Service(defaults || {});\n  mixin(constructor.prototype, methods);\n  return constructor;\n}\n\nmixin(exports, {\n  Request: Request,\n  Service: Service,\n  request: request,\n  service: service,\n  get: get,\n  patch: patch,\n  post: post,\n  put: put,\n  del: del,\n  head: head,\n  json: json,\n  postJson: postJson,\n  putJson: putJson,\n  patchJson: patchJson,\n  parsers: parsers,\n  file: multipart.file,\n  data: multipart.data\n});\n\n","/home/travis/build/npmtest/node-npmtest-restler/restler/lib/multipartform.js":"var fs = require('fs');\nvar sys = require('util')\nexports.defaultBoundary = '48940923NODERESLTER3890457293';\n\n\n// This little object allows us hijack the write method via duck-typing\n// and write to strings or regular streams that support the write method.\nfunction Stream(stream) {\n\t//If the user pases a string for stream,we initalize one to write to\n\tif (this._isString(stream)) {\n\t\tthis.string = \"\";\n\t}\n\tthis.stream = stream;\n\t\n}\n\nStream.prototype = {\n  //write to an internal String or to the Stream\n  write: function(data) {\n\tif (this.string != undefined) {\n\t\tthis.string += data;\n\t} else {\n\t\tthis.stream.write(data, \"binary\");\n\t}\n  },\n\n  //stolen from underscore.js\n  _isString: function(obj) {\n    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n  }\n}\n\nfunction File(path, filename, fileSize, encoding, contentType) {\n  this.path = path;\n  this.filename = filename || this._basename(path);\n  this.fileSize = fileSize;\n  this.encoding = encoding || \"binary\";\n  this.contentType = contentType || 'application/octet-stream';\n}\n\nFile.prototype = {\n  _basename: function(path) {\n    var parts = path.split(/\\/|\\\\/);\n    return parts[parts.length - 1];\n  }\n};\n\nfunction Data(filename, contentType, data) {\n  this.filename = filename;\n  this.contentType = contentType || 'application/octet-stream';\n  this.data = data;\n}\n\nfunction Part(name, value, boundary) {\n  this.name = name;\n  this.value = value;\n  this.boundary = boundary;\n}\n\n\nPart.prototype = {\n\t\n  //returns the Content-Disposition header\t\t\n  header: function() {\n\t  var header;\n\t  \n    if (this.value.data) {\n\t    header = \"Content-Disposition: form-data; name=\\\"\" + this.name + \n  \t            \"\\\"; filename=\\\"\" + this.value.filename + \"\\\"\\r\\n\" +\n  \t            \"Content-Length: \" + this.value.data.length + \"\\r\\n\" +\t\n  \t            \"Content-Type: \" + this.value.contentType;\n \t  } else if (this.value instanceof File) {\n  \t  header = \"Content-Disposition: form-data; name=\\\"\" + this.name + \n  \t            \"\\\"; filename=\\\"\" + this.value.filename + \"\\\"\\r\\n\" +\n  \t            \"Content-Length: \" + this.value.fileSize + \"\\r\\n\" +\t\n  \t            \"Content-Type: \" + this.value.contentType;\t\n  \t} else {\n      header = \"Content-Disposition: form-data; name=\\\"\" + this.name + \"\\\"\";\n  \t}\n  \t\n\t  return \"--\" + this.boundary + \"\\r\\n\" + header + \"\\r\\n\\r\\n\";\n  },\n\n  //calculates the size of the Part\n  sizeOf: function() {\n\t  var valueSize;\n  \tif (this.value instanceof File) {\n  \t  valueSize = this.value.fileSize;\n  \t} else if (this.value.data) {\n  \t  valueSize = this.value.data.length;\n        } else if (typeof this.value === 'number') {\n          valueSize = this.value.toString().length;\n  \t} else {\n  \t  valueSize = this.value.length;\n  \t}\n  \treturn valueSize + this.header().length + 2; \n  },\n\n  // Writes the Part out to a writable stream that supports the write(data) method\n  // You can also pass in a String and a String will be returned to the callback\n  // with the whole Part\n  // Calls the callback when complete\n  write: function(stream, callback) {\n\t\n    var self = this;\n\t\n\t  //first write the Content-Disposition\n\t  stream.write(this.header());\n\t\n  \t//Now write out the body of the Part\n    if (this.value instanceof File) {\n  \t  fs.open(this.value.path, \"r\", 0666, function (err, fd) { \n    \t  if (err) throw err; \n    \t  \n  \t\t  var position = 0;\n  \t\t  \n  \t    (function reader () {\n  \t      fs.read(fd, 1024 * 4, position, \"binary\", function (er, chunk) {\n  \t        if (er) callback(err);\n  \t        stream.write(chunk); \n  \t        position += 1024 * 4;\n  \t        if (chunk) reader();\n  \t        else {\n  \t\t\t      stream.write(\"\\r\\n\")\n      \t\t\t  callback();\n      \t\t\t  fs.close(fd);\n      \t\t\t}\n  \t      }); \n  \t    })(); // reader() \n  \t  });\n     } else if (this.value instanceof Data) {\n  \t  stream.write(this.value.data);\n  \t  stream.write(\"\\r\\n\");\n  \t  callback();\n     } else {\n  \t  stream.write(this.value + \"\\r\\n\");\n  \t  callback();\n  \t}\n  }\n}\n\n//Renamed to MultiPartRequest from Request\nfunction MultiPartRequest(data, boundary) {\n  this.encoding = 'binary';\n  this.boundary = boundary || exports.defaultBoundary;\n  this.data = data;\n  this.partNames = this._partNames();\n}\n\nMultiPartRequest.prototype = {\n  _partNames: function() {\n    var partNames = [];\n    for (var name in this.data) {\n      partNames.push(name)\n  \t}\n  \treturn partNames;\n  },\n  \n  write: function(stream, callback) {\n    var partCount = 0, self = this;\n    \n\t  // wrap the stream in our own Stream object\n  \t// See the Stream function above for the benefits of this\n  \tvar stream = new Stream(stream);\n  \t\n  \t// Let each part write itself out to the stream\n  \t(function writePart() {\n  \t  var partName = self.partNames[partCount];\n  \t  var part = new Part(partName, self.data[partName], self.boundary);\n  \t  part.write(stream, function (err) {\n  \t\t  if (err) {\n    \t\t\tcallback(err);\n    \t\t\treturn;\n    \t\t}\n     \t\tpartCount += 1;\n    \t  if (partCount < self.partNames.length)\n    \t    writePart();\n    \t\telse {\n    \t\t  stream.write('--' + self.boundary + '--' + \"\\r\\n\");\n\n          if (callback) callback(stream.string || \"\");\n    \t\t}\n  \t  });\n    })(); \n  }\n}\n\nvar exportMethods = {\n  file: function(path, filename, fileSize, encoding, contentType) { \n    return new File(path, filename, fileSize, encoding, contentType)\n  },\n  data: function(filename, contentType, data) {\n    return new Data(filename, contentType, data);\n  },\n  sizeOf: function(parts, boundary) {\n    var totalSize = 0;\n\t  boundary = boundary || exports.defaultBoundary;\n  \tfor (var name in parts) totalSize += new Part(name, parts[name], boundary).sizeOf();\n  \treturn totalSize + boundary.length + 6;\n  },\n  write: function(stream, data, callback, boundary) {\n    var r = new MultiPartRequest(data, boundary);\n    r.write(stream, callback);\n    return r;\n  }\n}\n\nObject.keys(exportMethods).forEach(function(exportMethod) {\n  exports[exportMethod] = exportMethods[exportMethod]\n})\n"}